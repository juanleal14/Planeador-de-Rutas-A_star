import sys
import os
import re
from constraint import *

class Parking_space:
    def __init__(self, emergency, Non_Urgent, electric):
        self.emergency = emergency
        self.Non_Urgent = Non_Urgent
        self.electric = electric

class Parking_row:
    def __init__(self, num_spaces):
        self.parking_spaces = [Parking_space(False, False, False) for _ in range(num_spaces)]

class Parking_lot:
    def __init__(self, num_rows, num_spaces_per_row):
        self.parking_rows = [Parking_row(num_spaces_per_row) for _ in range(num_rows)]

def parse_file_content(content):
    lines = content.split('\n')

    # Parsing Rows and Columns
    rows, columns = map(int, re.findall(r'\d+', lines[0]))

    # Parsing Locations with connection to the electrical grid
    locations_line = lines[1].split(":")[1].strip()
    locations_electric = re.findall(r'\((\d+),(\d+)\)', locations_line)
    locations_electric = [(int(x), int(y)) for x, y in locations_electric]
    print(locations_electric)

    parking_lot = Parking_lot(rows, columns)

    # Setting the emergency and electric attributes based on input
    for location in locations_electric:
        x, y = location
        parking_lot.parking_rows[x-1].parking_spaces[y-1].electric = True

    # Parsing Vehicle information
    vehicles = []
    for line in lines[2:]:
        if line:
            match = re.match(r'(\d+)-(\w+)-(\w+)', line)
            if match:
                vehicle_id, tipo, freezer = match.groups()
                vehicles.append((int(vehicle_id), tipo, freezer))

    return parking_lot, vehicles, rows, columns

def read_file(file_path):
    try:
        with open(file_path, 'r') as file:
            content = file.read()
            return content
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
        sys.exit(1)

def main():
    if len(sys.argv) != 2:
        print("Usage: python parking_script.py <file_path>")
        sys.exit(1)

    file_path = sys.argv[1]
    file_content = read_file(file_path)
    parking_lot, vehicles, rows, columns = parse_file_content(file_content)

    print("\nVehicle Information:")
    for vehicle in vehicles:
        print(vehicle)

    print("\nparking_lot information")
    for i in parking_lot.parking_rows:
        for j in i.parking_spaces:
            print(j.electric, " ", j.emergency, " ", j.Non_Urgent, "\n")

    print("\n\n\nNow Restrictions\n\n\n")
    problem = Problem()

    # Add variables to the problem
    # Each parking space is a variable, and the domain of each variable is the set of all vehicles
    print("\nVariables\n")
    for row in range(rows):
        for column in range(columns):
            constraint_name = f"P_{row}_{column}"
            print(f"Adding Variable: {constraint_name}")
            problem.addVariable(f"P_{row}_{column}", vehicles)

    # Add constraints to the problem

    # Constraint 1: Every vehicle must be assigned one location and only one.
    print("\nRestriction 1\n")
    for vehicle_id, _, _ in vehicles:
        constraint_names = [f"P_{row}_{column}_{vehicle_id}" for row in range(rows) for column in range(columns)]
        print(f"Adding constraint: {constraint_names}")
        problem.addConstraint(lambda *args: sum(args) == 1, constraint_names)

    # Constraint 2: Two different vehicles cannot take the same location.
    print("\nRestriction 2\n")
    for row in range(rows):
        for column in range(columns):
            constraint_names = [f"P_{row}_{column}_{vehicle_id}" for vehicle_id, _, _ in vehicles]
            print(f"Adding constraint: {constraint_names}")
            problem.addConstraint(AllDifferentConstraint(), constraint_names)

    # Constraint 3: Vehicles equipped with a freezer can only take a location with connection to the electrical network.
    print("\nRestriction 3\n")
    for row in range(rows):
        for column in range(columns):
            if not parking_lot.parking_rows[row].parking_spaces[column].electric:
                for vehicle_id, _, freezer in vehicles:
                    constraint_name = f"P_{row}_{column}_{vehicle_id}"
                    print(f"Adding constraint: {constraint_name}")
                    if freezer == "C":
                        problem.addConstraint(lambda vehicle: vehicle[2] == "C", [constraint_name])
                    else:
                        problem.addConstraint(lambda vehicle: vehicle[2] != "C", [constraint_name])


    # Constraints 4 and 5 would be similar, but would require more complex constraint functions

    # Get the solutions to the problem
    solutions = problem.getSolutions()
    print("\nSolutions computed\n")
if __name__ == "__main__":
    main()
