import sys
import csv
import heapq
initial_energy = 15


def main():

    # Example code for parsing the map
    class Ambulance:
        def __init__(self, row, col, patients_C, patients_N,remaining_patients_C, remaining_patients_N, remaining_energy, timesinp):
            self.row = row
            self.col = col
            self.patients_C = patients_C
            self.patients_N = patients_N
            self.remaining_patients_C = remaining_patients_C
            self.remaining_patients_N = remaining_patients_N
            self.total_rows = rows
            self.total_columns = columns
            self.remaining_energy = remaining_energy
            self.timesinp= timesinp
        def __eq__(self, other):
            if isinstance(other, Ambulance):
                return self.row == other.row and self.col == other.col and self.patients_C == other.patients_C and self.patients_N == other.patients_N and self.remaining_patients_C == other.remaining_patients_C and self.remaining_patients_N == other.remaining_patients_N and self.remaining_energy == other.remaining_energy and self.timesinp== other.timesinp
            return False

        def __hash__(self):
            return hash((self.row, self.col, self.patients_C, self.patients_N, self.remaining_patients_C, self.remaining_patients_N, self.remaining_energy, self.timesinp))
        def __lt__(self, other):
            if isinstance(other, Ambulance):
                return self.remaining_energy < other.remaining_energy
            return NotImplemented
    class Location:
        def __init__(self, row, col, cell_type, time_cost, patient_type, facility_type):
            self.row = row
            self.col = col
            self.cell_type = cell_type
            self.time_cost = time_cost
            self.patient_type = patient_type
            self.facility_type = facility_type

    def parse_map(file_path):
        with open(file_path, newline='') as csvfile:
            reader = csv.reader(csvfile, delimiter=';')
            map_data = list(reader)

        locations = []
        for i, row in enumerate(map_data):
            for j, cell in enumerate(row):
                if cell in ['N', 'C', 'CC', 'CN', 'P']:
                    patient_type = 'non-infectious' if cell == 'N' else 'infectious' if cell == 'C' else None
                    facility_type = 'non-infectious' if cell == 'CN' else 'infectious' if cell == 'CC' else None
                    locations.append(Location(i, j, cell, 1, patient_type, facility_type))
                elif cell == 'X':
                    locations.append(Location(i, j, cell, float('inf'), None, None))
                else:
                    try:
                        time_cost = int(cell)
                        locations.append(Location(i, j, 'travelcell', time_cost, None, None))
                    except ValueError:
                        pass
        rows = i + 1
        columns = j + 1
        return locations, rows, columns

    # Example code for parsing the map

    def initial_state(locations):
        initial_patients_C = 0
        initial_patients_N = 0
        parking_location = next(loc for loc in locations if loc.cell_type == 'P')
        for loc in locations:
            if loc.cell_type == 'C':
                initial_patients_C += 1
            elif loc.cell_type == 'N':
                initial_patients_N += 1
        initial_ambulance = Ambulance(parking_location.row,parking_location.col, 0, 0,initial_patients_C,initial_patients_N, initial_energy, 0)  # Initial patients and energy values can be adjusted
        return initial_ambulance

    def goal_test(ambulance):
        location = next(loc for loc in locations if loc.row == ambulance.row and loc.col == ambulance.col)
        return location.cell_type == 'P' and ambulance.remaining_patients_C == 0 and ambulance.remaining_patients_N == 0 and ambulance.patients_C == 0 and ambulance.patients_N == 0

    def actions(ambulance):
        possible_actions = []
        # Move actions
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
        for dr, dc in directions:
            new_row, new_col = ambulance.row + dr, ambulance.col + dc

            if 0 <= new_row < ambulance.total_rows and 0 <= new_col < ambulance.total_columns:
                new_location = next(loc for loc in locations if loc.row == new_row and loc.col == new_col)
                if new_location.cell_type not in ['X', 'P', 'C', 'N', 'CC', 'CN']:  # Exclude non-traversable and parking cells
                    possible_actions.append(('MOVE', new_location))

                # Pick up patients
                if ambulance.patients_N < 10 and new_location.cell_type == 'N' and ambulance.patients_C <2:
                    possible_actions.append(('PICKUP_NON_CONTIGUOUS', new_location))

                if ambulance.patients_C < 2 and new_location.cell_type == 'C' and ambulance.patients_N < 9 and ambulance.patients_N == ambulance.remaining_patients_N:
                    possible_actions.append(('PICKUP_CONTIGUOUS', new_location))

                # Drop off patients
                if ambulance.patients_C  > 0 and new_location.cell_type == 'CC':
                    possible_actions.append(('DROPOFF_CONTIGUOUS', new_location))

                if ambulance.patients_N > 0 and ambulance.patients_C == 0 and new_location.cell_type == 'CN':
                    possible_actions.append(('DROPOFF_NON_CONTIGUOUS', new_location))
                                            
                if new_location.cell_type == 'P':
                    possible_actions.append(('RECHARGE', new_location))

        return possible_actions

    def result(ambulance, action, location):
        action_type, location = action, location
        new_ambulance = Ambulance(location.row,location.col, ambulance.patients_C, ambulance.patients_N, ambulance.remaining_patients_C,ambulance.remaining_patients_N,ambulance.remaining_energy, ambulance.timesinp)

            
        if action_type == 'PICKUP_CONTIGUOUS':
            new_ambulance.patients_C += 1
            new_ambulance.remaining_energy -= location.time_cost
            location.cell_type = 'travelcell'
            location.time_cost = 1


        elif action_type == 'PICKUP_NON_CONTIGUOUS':
            new_ambulance.patients_N += 1
            new_ambulance.remaining_energy -= location.time_cost
            location.cell_type = 'travelcell'
            location.time_cost = 1


        elif action_type == 'DROPOFF_CONTIGUOUS':
            new_ambulance.remaining_patients_C -= new_ambulance.patients_C
            new_ambulance.patients_C = 0
            new_ambulance.remaining_energy -= location.time_cost


        elif action_type == 'DROPOFF_NON_CONTIGUOUS':
            new_ambulance.remaining_patients_N -= new_ambulance.patients_N
            new_ambulance.patients_N = 0
            new_ambulance.remaining_energy -= location.time_cost

        elif action_type == 'MOVE':
            new_ambulance.remaining_energy -= location.time_cost

        elif action_type == 'RECHARGE':
            new_ambulance.remaining_energy = initial_energy
            new_ambulance.timesinp+=1



        return new_ambulance



    def heuristic_1(ambulance, location):
        if ambulance.remaining_patients_C == 0 and ambulance.remaining_patients_N == 0:
            for loc in locations:
                if loc.cell_type == 'P':
                    return abs(loc.row - location.row) + abs(loc.col - location.col)
        elif ambulance.remaining_patients_C != 0 or ambulance.remaining_patients_N != 0:
            if ambulance.remaining_patients_N == 0:    
                if ambulance.
                    for loc in locations:
                        if loc.cell_type == 'C':
                            return abs(loc.row - location.row) + abs(loc.col - location.col)


    def heuristic_2(ambulance,location):
        # Implement the second heuristic function
        if ambulance.remaining_patients_C == 0 and ambulance.remaining_patients_N == 0:
            for loc in locations:
                if loc.cell_type == 'P':
                    return abs(loc.row - location.row) + abs(loc.col - location.col)
        return 0
        pass
    def go_back_ambulance(ambulance):
        for loc in locations:
                if loc.cell_type == 'P':
                    return abs(loc.row - ambulance.row) + abs(loc.col - ambulance.col)
    def a_star_search(initial_state, heuristic_function):
        heap = [(initial_state, 0)] #Open List
        came_from = set() #Closed list
        while heap:
           
            current_state , current_cost  = heapq.heappop(heap)

            print("heap",current_state.row,current_state.col,current_state.patients_C,current_state.patients_N,current_state.remaining_patients_C,current_state.remaining_patients_N,current_state.remaining_energy,current_state.timesinp)
            if goal_test(current_state):
                print("Diablo",len(came_from))
                print("heap",current_state.row,current_state.col,current_state.patients_C,current_state.patients_N,current_state.remaining_patients_C,current_state.remaining_patients_N,current_state.remaining_energy,current_state.timesinp)
                return current_state, came_from  # Found the goal state
            print("Number of actions available: ", len(actions(current_state)))
            for action,location in actions(current_state):
                #print(action,location.cell_type)
                new_state = result(current_state, action, location)
                if heuristic_function == 1:
                    new_cost = current_cost + location.time_cost + heuristic_1(new_state,location)  
                elif heuristic_function == 2:
                    new_cost = current_cost + location.time_cost + heuristic_2(new_state,location)
                
                heapq.heappush(heap, (new_state, new_cost))
                came_from.add(current_state)


                #energy

                if current_state.remaining_energy <= 0:
                    #return None
                    came_from = {initial_state: None}
                    heap = [(initial_state,0)]
                elif current_state.timesinp >=1:
                    came_from = {initial_state: None}
                    heap = [(initial_state,0)]
               
        print("Fok")
        return None  # No solution found

    def print_solution(state):
        # Implement logic to print the solution
        pass


    file_path = sys.argv[1]
    locations, rows, columns = parse_map(file_path)
    heuristic = sys.argv[2]
    print(heuristic)
    print("\nInitial State\n")
    Num_patients_C = sum(1 for loc in locations if loc.cell_type == 'C')
    Num_patients_N = sum(1 for loc in locations if loc.cell_type == 'N')
    print(Num_patients_C)
    print(Num_patients_N)
    for i in range(len(locations)):
        if locations[i].cell_type == 'P':
            Initial_state = Ambulance(locations[i].row, locations[i].col, 0, 0,Num_patients_C,Num_patients_N, initial_energy, 0)
            break
    print(Initial_state.row)
    print(Initial_state.col)
    print(Initial_state.patients_N)
    print(Initial_state.patients_C)
    print("\nGoal State\n")
    Goal_State = Initial_state
    print("\n\nHeuristic Search: A*.....\n\n")
    #Heuristic 1: 2*min{distance to nearest infectious center, distance to nearest non-infectious center}
    if len(sys.argv) != 3:
        print("Usage: python ASTARTraslados.py <pathmap.csv> <num-h>")
        sys.exit(1)

    heuristic_num = int(sys.argv[2])

    file_path = sys.argv[1]
    #locations = parse_map(file_path)
    initial = initial_state(locations)

    if heuristic_num == 1:
        solution = a_star_search(initial, heuristic_1)
    elif heuristic_num == 2:
        solution = a_star_search(initial, heuristic_2)
    else:
        print("Invalid heuristic number.")
        sys.exit(1)

    if solution:
        print("Diablo papi o mami que rico")
        print_solution(solution)
    else:
        print("No solution found.")

    return locations
if __name__ == "__main__":
    main()
